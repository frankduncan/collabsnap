<blocks app="Snap! 4.0, http://snap.berkeley.edu" version="1"><block-definition s="collabsnap-ping-server" type="command" category="control"><header></header><code></code><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>var xhr = new XMLHttpRequest();&#xD;xhr.open("GET", "/server/ping/" + collabsnap_activity + "/" + collabsnap_group, true);&#xD;xhr.send();</l></block><list></list></block></script></block-definition><block-definition s="collabsnap-poll-server" type="command" category="control"><header></header><code></code><inputs></inputs><script><block s="doForever"><script><block s="doRun"><block s="reportJSFunction"><list><l>newSpriteHandler</l><l>messageHandler</l><l>filter</l></list><l>if((world.collabsnapPolling == undefined || !world.collabsnapPolling)&#xD;   &amp;&amp; world.collabsnapListeners != undefined &amp;&amp; world.collabsnapListeners.length &gt; 0) {&#xD;  world.collabsnapPolling = true;&#xD;  var xhr = new XMLHttpRequest();&#xD;  if(world.queriesStr == undefined) {&#xD;    var queriesDoc = document.implementation.createDocument(null, "queries");&#xD;    for(var idx = 0 ; idx &lt; world.collabsnapListeners.length ; idx++) {&#xD;      var queryDoc = queriesDoc.createElement("query");&#xD;      if(world.collabsnapListeners[idx].filter) {&#xD;        queriesDoc.documentElement.appendChild(queryDoc);&#xD;        queryDoc.appendChild(world.collabsnapListeners[idx].filter(queriesDoc));&#xD;      }&#xD;    }&#xD;    world.queriesStr = new XMLSerializer().serializeToString(queriesDoc);&#xD;  }&#xD; &#xD;  xhr.open("POST", "/server/poll/" + collabsnap_activity + "/" + collabsnap_group, true);&#xD;  xhr.setRequestHeader("Content-length", world.queriesStr.length);&#xD;  xhr.onreadystatechange = function () {&#xD;    world.collabsnapPolling = false;&#xD;    if(xhr.readyState === XMLHttpRequest.DONE &amp;&amp; xhr.status === 200) {&#xD;      if (xhr.responseText == "false") {&#xD;      } else if(xhr.responseText == "ping") {&#xD;        window.alert("Ping sent to server, received here");&#xD;      } else if (xhr.responseXML != null) {&#xD;        for(var idx = 0 ; idx &lt; world.collabsnapListeners.length ; idx++) {&#xD;          var msg;&#xD;          var msgXML = xhr.responseXML.childNodes[0].childNodes[idx];;&#xD;          if(msgXML.nodeName == "null") {        &#xD;          } else if(msgXML.nodeName == "message") {&#xD;            msg = msgXML;&#xD;            invoke(world.collabsnapListeners[idx].callback, new List([msg]));&#xD;          } else if (msgXML.nodeName == "sprite") {&#xD;            var ser = new SnapSerializer();&#xD;            var ide_morph = world.children[0];&#xD;            ser.project = ide_morph;&#xD;            var resp = new XMLSerializer().serializeToString(msgXML);&#xD;            msg = ser.loadValue(ser.parse(resp));&#xD;            invoke(world.collabsnapListeners[idx].callback, new List([msg]));&#xD;          }          &#xD;        }&#xD;      }&#xD;    }&#xD;  };&#xD;  xhr.send(world.queriesStr);&#xD;}</l></block><list></list></block><block s="doWait"><l>1</l></block></script></block></script></block-definition><block-definition s="collabsnap-serialize-sprite %&apos;sprite&apos;" type="reporter" category="sensing"><header></header><code></code><inputs><input type="%obj"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>thing</l></list><l>return new SnapSerializer().serialize(thing);</l></block><list><block var="sprite"/></list></block></block></script></block-definition><block-definition s="collabsnap-send-to-server %&apos;str&apos;" type="command" category="control"><header></header><code></code><inputs><input type="%s"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>str</l></list><l>var xhr = new XMLHttpRequest();&#xD;xhr.open("POST", "/server/postsprite/" + collabsnap_activity + "/" + collabsnap_group, true);&#xD;xhr.setRequestHeader("Content-length", str.length);&#xD;xhr.setRequestHeader("Connection", "close");&#xD;xhr.send(str);</l></block><list><block var="str"/></list></block></script></block-definition><block-definition s="collabsnap-send-myself-to-server" type="command" category="control"><header></header><code></code><inputs></inputs><script><custom-block s="collabsnap-send-to-server %s"><custom-block s="collabsnap-serialize-sprite %obj"><block s="reportGet"><l><option>self</option></l></block></custom-block></custom-block></script></block-definition><block-definition s="collabsnap-new-sprite-as-sprite %&apos;sprite&apos;" type="command" category="operators"><header></header><code></code><inputs><input type="%s"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>sprite</l></list><l>var ide_morph = world.children[0];&#xD;ide_morph.sprites.add(sprite);&#xD;ide_morph.corral.addSprite(sprite);&#xD;sprite.allHatBlocksFor(&apos;__shout__go__&apos;).forEach(&#xD;  function(block) {&#xD;    ide_morph.stage.threads.startProcess(block);&#xD;  });</l></block><list><block var="sprite"/></list></block></script></block-definition><block-definition s="collabsnap-new-sprite-as-clone %&apos;sprite&apos;" type="command" category="operators"><header></header><code></code><inputs><input type="%s"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>sprite</l></list><l>sprite.isClone = true;&#xD;sprite.name = "";&#xD;var ide_morph = world.children[0];&#xD;&#xD;sprite.allHatBlocksFor(&apos;__clone__init__&apos;).forEach(&#xD;  function (block) {&#xD;    ide_morph.stage.threads.startProcess(block);  &#xD;  });</l></block><list><block var="sprite"/></list></block></script></block-definition><block-definition s="collabsnap-filter-variable-equal %&apos;name&apos; %&apos;value&apos;" type="reporter" category="operators"><header></header><code></code><inputs><input type="%txt"></input><input type="%txt"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>name</l><l>value</l></list><l>return function(xmlDoc) {&#xD;  var ele = xmlDoc.createElement("variable-equal");&#xD;  ele.setAttribute("name", name);&#xD;  ele.setAttribute("value", value);&#xD;  return ele;&#xD;}</l></block><list><block var="name"/><block var="value"/></list></block></block></script></block-definition><block-definition s="collabsnap-id" type="reporter" category="variables"><header></header><code></code><inputs></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>// We stick this on world because it&apos;s there and this is a prototype.&#xD;// We should change this in the future because world isn&apos;t under out control,&#xD;// and may change out from underneath us&#xD;if(world.collabsnapUniqueId == undefined) {&#xD;  // Ripped from http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript &#xD;  world.collabsnapUniqueId = &apos;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&apos;.replace(/[xy]/g, function(c) {&#xD;    var r = Math.random()*16|0, v = c == &apos;x&apos; ? r : (r&amp;0x3|0x8);&#xD;    return v.toString(16);&#xD;  });&#xD;}&#xD;&#xD;return world.collabsnapUniqueId;</l></block><list></list></block></block></script></block-definition><block-definition s="collabsnap-message-key %&apos;message&apos;" type="reporter" category="variables"><header></header><code></code><inputs><input type="%s"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>msg</l></list><l>return msg.childNodes[0].childNodes[0].childNodes[0].nodeValue</l></block><list><block var="message"/></list></block></block></script></block-definition><block-definition s="collabsnap-message-value %&apos;message&apos;" type="reporter" category="variables"><header></header><code></code><inputs><input type="%s"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>msg</l></list><l>return msg.childNodes[0].childNodes[1].childNodes[0].nodeValue</l></block><list><block var="message"/></list></block></block></script></block-definition><block-definition s="collabsnap-make-message %&apos;key&apos; %&apos;value&apos;" type="reporter" category="variables"><header></header><code></code><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>k</l><l>v</l></list><l>var xmlDoc = document.implementation.createDocument(null, "message");&#xD;&#xD;var keyNode = xmlDoc.createElement("key");&#xD;var keyText = xmlDoc.createTextNode(k);&#xD;keyNode.appendChild(keyText);&#xD;var valNode = xmlDoc.createElement("val");&#xD;var valText = xmlDoc.createTextNode(v);&#xD;valNode.appendChild(valText);&#xD;&#xD;xmlDoc.documentElement.appendChild(keyNode);&#xD;xmlDoc.documentElement.appendChild(valNode);&#xD;&#xD;return xmlDoc;</l></block><list><block var="key"/><block var="value"/></list></block></block></script></block-definition><block-definition s="collabsnap-serialize-message %&apos;message&apos;" type="reporter" category="sensing"><header></header><code></code><inputs><input type="%s"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>msg</l></list><l>return new XMLSerializer().serializeToString(msg);</l></block><list><block var="message"/></list></block></block></script></block-definition><block-definition s="collabsnap-filter-key-equal %&apos;key&apos;" type="reporter" category="operators"><header></header><code></code><inputs><input type="%txt"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>key</l></list><l>return function(xmlDoc) {&#xD;  var ele = xmlDoc.createElement("message-key");&#xD;  ele.setAttribute("key", key);;&#xD;  return ele;&#xD;}</l></block><list><block var="key"/></list></block></block></script></block-definition><block-definition s="collabsnap-add-listener %&apos;filter&apos; %&apos;handler&apos;" type="reporter" category="control"><header></header><code></code><inputs><input type="%s"></input><input type="%cmdRing"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>filter</l><l>handler</l></list><l>if(world.collabsnapListeners == undefined) {&#xD;  world.collabsnapListeners = [];&#xD;}&#xD;&#xD;var listenerId = false;&#xD;for(var idx = 0 ; idx &lt; world.collabsnapListeners.length ; idx++) {&#xD;  if(world.collabsnapListeners[idx].filter.toString() == filter.toString() &amp;&amp;&#xD;     world.collabsnapListeners[idx].callback.toString() == handler.toString()) {&#xD;    listenerId = world.collabsnapListeners[idx].listenerId;&#xD;  } &#xD;}&#xD;&#xD;if(!listenerId) {&#xD;  // Ripped from http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript &#xD;  listenerId = &apos;xxxxxxxx&apos;.replace(/[xy]/g, function(c) {&#xD;    var r = Math.random()*16|0, v = c == &apos;x&apos; ? r : (r&amp;0x3|0x8);&#xD;    return v.toString(16);&#xD;  });&#xD;  world.collabsnapListeners.push({ "filter": filter, "callback": handler, "listenerId": listenerId});&#xD;  world.queriesStr = undefined;&#xD;}&#xD;&#xD;return listenerId</l></block><list><block var="filter"/><block var="handler"/></list></block></block></script></block-definition><block-definition s="collabsnap-reset-listeners" type="command" category="control"><header></header><code></code><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>world.collabsnapListeners = [];</l></block><list></list></block></script></block-definition><block-definition s="collabsnap-remove-listener %&apos;listener-id&apos;" type="command" category="control"><header></header><code></code><inputs><input type="%s"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>listenerId</l></list><l>if(world.collabsnapListeners != undefined) {&#xD;  for (var idx = 0 ; idx &lt; world.collabsnapListeners.length ; idx++) {&#xD;    if(world.collabsnapListeners[idx].listenerId == listenerId) {&#xD;      world.collabsnapListeners.splice(idx, 1);&#xD;      break;&#xD;    }&#xD;  }&#xD;}</l></block><list><block var="listener-id"/></list></block></script></block-definition></blocks>